#include <iostream>
using namespace std;
int main()
{
	cout<<"I love programming."<<endl;
	
	return 0;
}

头文件是C++程序对其他程序的引用。 头文件作为一种包含功能函数/
数据接口声明的载体文件， 用于保存程序的声明。

//exam1.2
#include <iostream>
using namespace std;
int main()
{
	cout<<20 / 7<<endl;
	cout<<20 % 7<<endl;
	return 0;
}

C++的输入和输出是用“流”的方式实现的。

在定义流对象时，系统会在内存中开辟一段缓冲区， 用来暂存输入
输出流的数据。在执行cout语句时， 先把数据存放在输出缓冲区中，
直到输出缓冲区满或遇到cout语句中的endl为止。

fixed<<setprecision(8）输出保留小数后8位，需要
头文件#include <iomanip>

C++语言变量命名规则：
	1. 变量名只能出现字母（A~Z, a~z)、数字0 ~ 9或下划线
	2. 第一个字符不能是数字。
	3. 不能是C++关键字。
	4. 区分大小写。
	

变量定义的两个关键要素是数据类型和变量名。

声明常量：
具体来说：
       类型说明符 const 常量名
	const int x = 5; 表示 x 是一个常量整数。
	int const x = 5; 也表示 x 是一个常量整数。
	在实际编译时，两者的行为和效果是完全相同的。

自动类型转换遵循下面规则：
	1. 若参加运算的数据类型不同， 则先转换同一类型， 然后进行运算。
	2. 转换按数据长度增加的方向进行， 以保证精度不降低。
	3. 赋值运算中， 赋值号两边数据类型一定是相兼容的类型。如果两边不兼容， 语句在编译时会报错。
	4. 赋值运算中， 赋值号两边的数据类型不相同时， 将把右边表达式的值类型转换为左边变量的类型。
	如果右边表达式的值的数据类型比左边长时， 将丢失一部分数据。
	
	当自动类型转换不能实现目的时， 可以显式进行类型转换， 称为强制类型转换。
	
	scanf("格式控制字符串"， 地址表明)
	
	
C++语言 生成随机数的方法：
 rand() 需要头文件 #include <cstdlib>
 srand(time(null)) 需要#include <cstdlib> #include <time>
 通用公式： a + rand() % n，a是起始值， n 是整数的范围。
 
 要取得a到b之间的随机整数，a + (int) b * rand() / (RAND_MAX + 1)



















