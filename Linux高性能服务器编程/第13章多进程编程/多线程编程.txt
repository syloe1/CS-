创建新进程的系统调用fork
#include <sys/types.h>
#include <unistd.h>
pid_t fork(void);

exec系列系统调用
#include <unistd.h>
extern char ** environ;
int  execl(const char * path, const char * arg, ...);
int execlp(const char * file, const char* arg, ...);
int execle(const char * path, const char * arg,  ..., char * const envp[]);
int execv(const char * path, char * const argv[]);
int execvp(const char * file, char * const argv[]);
int execve(const char * path, char * const argv[], char * const envp[]);

对于多进程程序而言， 父进程一般需要跟踪子进程的退出状态。
子进程结束运行时， 内核不会立即释放该进程的进程表表项， 以满足父进程后续对该子进程退出信息的查询。 在子进程结束运行之后， 父进程读取其退出状态之前， 我们称为 进程处于僵尸态。



使子进程的僵尸态立即结束：
	#include <sys/types.h>
	#include <sys/wait.h>
	pid_t wait(int * stat_loc);
	pid_t waitpid(pid_t pid, int * stat_loc, int options);

通常，程序对共享资源的访问的代码只是很短的一段， 但就是这一段代码引发了进程之间的竞态条件。
semget创建一个新的信号量集
#include <sys/sem.h>
int semget(key_t key, int num_sems, int sem_flags);


semop系统调用改变信号量的值
#include <sys/sem.h>
int semop(int sem_id, struct sembuf* sem_ops,
 size_t num_sem_ops);

结构体 
struct sembuf {
	unsigned short int sem_num;
	short int sem_op;
	short int sem_flg;
};

semctl系统调用允许调用者对信号量进行直接控制。
#include <sys/sem.h>
int semctl(int sem_id, int sem_num, int command, ....);

shmget系统调用
     " 调用创建一段新的共享内存， 或者获取一段已经存在的共享内存
























 