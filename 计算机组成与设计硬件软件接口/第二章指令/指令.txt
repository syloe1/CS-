指令集： 一个给定的计算机体系结构所包含的指令集合。
本章目的： 讲解一种指令集，介绍它怎么样用硬件表示。

通过理解如何表述指令， 去理解存储程序概念

存储程序概念：多种类型的指令和数据均以数字的形式存储于存储器中的概念。
字： 计算机中的基本访问单位， 通常是32位一组。
大量的寄存器可能会使时钟周期变长， 因为电信号传输更远的距离
必然花费更多时间。


数据结构是存放在存储器中的。
数据传送指令： 在存储器和寄存器之间移动数据的命令
地址： 用于在存储器空间中指明某特定数据元素位子的值。
将数据从存储器复制到寄存器的数据传送指令通常叫取数指令。

取数指令的格式是操作码后接着目标寄存器， 再后面是用来访问存储器的
常数和寄存器。
常数和第二个寄存器中的值相加即得存储器地址。

数据传送指令中的常量是偏移量， 存放基址的寄存器是基址存储器。

硬件/软件接口：
	除了将变量与寄存器对应起来， 编译器还在存储器中为数据结构分配相应的位置
	。然后编译器把它们在存储器中的起始地址放到数据传送指令中。
对齐限制（Alignment Restriction）是指数据在内存中存放时必须遵循的规则。这些规则确保数据在内存中按照特定的边界对齐，以提高访问效率和避免访问错误。
存数指令： 将数据从寄存器复制到存储器。 首先是操作码， 接着是包含待存储数据的寄存器， 然后是数组元素的偏移量， 最后是基址寄存器。



最低有效位： 最右边的一位。
最高有效位： 最左边的一位。

如果操作结果不能被最有段的硬件位所表示， 那么就发生了溢出。

采用二进制补码方法优点： 所有负数的最高有效位都是1. 这个位通常叫符号位。

求反 = 取反 + 1
-x = ~x + 1

指令格式： 二进制数字段组成的指令表示形式。
条件分支： 该指令先比较两个值， 然后根据比较的结果决定是否从程序中的一个新地址
开始执行指令序列

过程或者函数是程序员进行结构化编程的工具。

跳转和链接指令： 跳转到某个地址的同时将下一条指令的地址保存到寄存器中的指令。
返回地址： 指向调用点的链接， 使过程可以返回寄存器跳转指令。

调用者： 调用一个过程并为过程提供必要参数值的程序。
被调用者： 根据调用者提供的参数执行一系列存储的指令， 然后把控制权返回调用者的过程
程序计数器： 包含在程序中正在被执行指令地址的寄存器。

代码段： unix目标文件中的段， 包含源文件中例程对应的机器语言代码。

空指针（Null Pointer）：

	空指针是一个指针变量，它被显式地赋予了一个空值（NULL或者nullptr，取决于语言标准），表示它不指向任何有效的内存地址。
	空指针是安全的，因为它们不指向任何对象，所以试图解引用空指针将导致运行时错误，但这是可预测和可控的。
	在C++中，nullptr是空指针字面量的类型，用于初始化指针变量或检查指针是否为空。
悬摆指针（Dangling Pointer）：

	悬摆指针是一个曾经指向某个有效内存地址，但后来该内存地址被释放或重新分配给其他数据的指针。
	悬摆指针是危险的，因为它们指向的内存可能已经不再属于原来的数据，如果试图通过悬摆指针访问内存，将导致未定义行为，可能引起程序崩溃或数据损坏。
	悬摆指针通常发生在动态内存分配后，如果释放了内存但没有将指针设置为NULL，指针仍然指向原来的地址，但该地址已经不再安全。

PC相对寻址： 一种寻址方式， 它将PC和指令中的常数相加作为寻址结果

数据竞争： 假如来自不同线程的两个访存请求访问同一个地址， 它们连续出现， 并且至少其中一个是写操作， 那么这两个存储访问形成数据竞争。
加锁和解锁同步操作的实现。 采用加锁和解锁可以直接创立一个仅允许单个处理器操作的区域，吗叫互斥区。

汇编语言： 一种符号语言， 能被翻译成二进制的机器语言。
伪指令： 汇编语言指令的一个变种， 通常被看作一条汇编指令
符号表： 一个用来匹配标记名和指令所在内存字的地址的列表

链接器： 是一个系统程序， 把各个独立汇编的机器语言程序组合起来并且
解决所有未定义的标记， 最后生成可执行文件。

链接器的工作：
	将代码和数据模块象征性地放入内存。
	决定数据和指令标签地地址
	修补内部和外部引用
链接器产生一个可执行文件：
加载器： 把目标程序装载到内存中以准备运行地系统程序。


动态链接库： 在程序执行过程中才被链接地库例程
DLL需要额外地空间来存储动态链接地信息， 但不需要复制或链接整个库。
仅仅在例程地第一次调用时开销较大， 此后就只需一个间接跳转。

即时编译器： 一类通用编译器地名称， 编译器能够在运行时将解释地代码段翻译成宿主计算机上的机器语言
