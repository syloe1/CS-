1. 为什么在s5fs和FFS中文件系统的磁盘inode数目是固定的？
2. 为什么文件的inode和文件的目录项是分离的？
3. 将一个文件的所有数据块都分配在一块连续的磁盘空间上有什么优点？又有什么缺点？什么样的应用程序可能需要这样的文件系统？
4. 如果一个磁盘错误毁掉了s5fs的超级块，将会发生什么情况？
5. 动态分配和释放inode有什么好处？
6. 使用基于引用目录名查找缓存的系统有时会耗尽空闲inode，而这仅仅是因为查找缓存引用了太多的inode，否则这些inode就都是空闲的了。文件系统该如何处理这种情况？
7. 对于像s5fs和FFS这样的传统文件系统来说，在一个大目录中进行名字查找是非常低效的。试探讨将目录组织成一个散列表的可能性。散列表是仅仅在内存中，还是应该有一部分在持久性介质上？这样做是否和名字查找缓存功能重复？
8. 在4.4BSD中，名字查找缓存还为不成功的查找维护表项。缓存这些信息的好处是什么？实现中需要处理的问题有哪些？
9. 为什么`write`系统调用有时要首先从磁盘上读数据块？
10. 为什么FFS文件系统要在与父目录不同的柱面组上分配新目录？
11. 在什么情况下旋转间隔因子会降低文件系统的性能？
12. 为什么使用现代SCSI硬盘降低了使用旋转算法的FFS文件系统的性能？
13. FFS文件系统中预留空闲空间的用途是什么？
14. 假设某个文件系统要将小文件的数据部分保留在它的inode而不是一个独立的数据块上。这种方法的优点和问题各是什么？
15. 临时文件使用一种特殊文件系统的优点有哪些？
16. 操作系统可以做哪些工作来降低缓存的清洗操作？
17. 将缓存系统从虚拟内存子系统中独立出来有哪些优点和缺点？

