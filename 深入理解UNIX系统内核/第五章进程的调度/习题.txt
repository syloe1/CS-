图片中的文字内容如下：

1. 为什么callout不会被主要时钟中断处理函数处理？
2. 管理callout时，在哪种场景下时间轮的方式会比4.3BSD上的算法更有效。
3. 使用delta时间和绝对时间处理callout时有什么优缺点？
   ☆
4. 为什么UNIX系统更适合于I/O密集型处理，而不是CPU密集型处理？
5. SVR4调度器的面向对象接口的优点是什么？缺点是什么？
   #
6. 为什么表5-17中slpret和lwait的值比每一行里的tqexp来得高？
7. 基于什么理由实时进程的优先级比内核进程的优先级更高？这样做有什么缺点？
8. 事件驱动的调度方法是如何有助于I/O密集型和交互式的应用程序的？
9. 考虑5.5.6节里的[Nieh93]实验，如果赋予X-server、视频应用程序、交互式任务实时优先级，而给批处理作业赋予一个分时优先级时，会有什么影响？
10. 假设进程释放了多个进程正在等待的某个资源。什么时候唤醒所有的进程比较好，什么时候只唤醒一个比较好？如果只唤醒一个进程，应该怎么选择这个进程？
11. 成组调度假设每个线程运行在分开的处理器上。如果处理器的数目比可运行线程的数目少，应用程序将怎样请求屏障同步操作？在这种情况下，线程能在屏障上忙等待吗？
12. Solaris2.x中有哪些不同的方法来支持实时应用程序。在哪些方面上，这是不合适的？
13. 为什么最终期限驱动调度方法不适于常规的操作系统？
14. 实时进程有哪些特点？请列举一些周期性和非周期性的实时应用程序的例子。
15. 能够简单地通过使用一个更快的处理器来减少响应时间和分发延迟？实时系统与高速、高性能系统有什么区别？有没有一个比较慢的系统，但却更适合实时应用程序？
16. 硬实时需求与软实时需求之间有什么不同？
17. 为什么在实时系统上，接纳控制非常重要？

请注意，这些内容涉及操作系统的调度、实时系统、进程管理等概念，通常需要具备一定的计算机科学背景才能完全理解。