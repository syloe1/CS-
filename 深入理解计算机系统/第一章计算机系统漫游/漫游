你将会学习一些实践技巧，比如如何避免由计算机表示数字的方式引起的奇怪的数字
错误。你将学会怎样通过一些小窍门来优化自己的 C代码，以充分利用现代处理器和存储
器系统的设计。你将了解编译器是如何实现过程调用的，以及如何利用这些知识来避免缓
冲区溢出错误带来的安全漏洞，这些弱点给网络和因特网软件带来了巨大的麻烦。你将学
会如何识别和避免链接时那些令人讨厌的错误，它们困扰着普通的程序员。你将学会如何
编写自 己的 Unix shell、自己的动态存储分配包，甚至于自己的 Web 服务器。你会认识并发
带来的希望和陷阱。
一个程序的生命周期从源程序开始。 源程序是通过0和1的位（比特）序列， 8个位被组成成一组， 称为字节。

区分不同数据对象的唯一方法是我们读到这些数据对象时的上下文。 在不同上下文中， 一个同样的字节序列可能表示一个整数、浮点数
字符串。

cpp      cll    as    ld
预处理器 编译器 汇编器 链接器构成了编译系统。

预处理阶段： 修改原始的C程序， 读取系统头文件并把内容插入程序文本中 .i

编译阶段： 编译器把文本文件 .i翻译成 .s, 它包含了一个汇编程序。

汇编阶段： 汇编器把汇编语言翻译成机器指令， 打包保存在 .o文件中

problem: C文件中定义了名字相同的两个全局变量会发生什么？
answer:
	1.后一个定义覆盖前一个定义：**后一个变量定义将覆盖前一个定义，前一个变量将变为不可用。
    2.符号重定义错误：**编译器将发出符号重定义错误，指出名称与现有变量冲突。
problem: 静态库和动态库的区别是什么？
answer:
		静态库（.a 或 .lib 文件）：

	在编译时链接到可执行文件。
	代码和数据被直接嵌入到可执行文件中。
	优点：
	可执行文件更小、更独立。
	运行时性能更好，因为代码和数据已经加载到内存中。
	缺点：
	可执行文件的大小会随着静态库的增大而增大。
	难以更新，因为需要重新编译和链接可执行文件。
	动态库（.so、.dll 或 .dylib 文件）：

	在运行时链接到可执行文件。
	代码和数据在单独的文件中，仅在需要时才加载到内存中。
	优点：
	可执行文件更小。
	易于更新，只需替换动态库文件即可。
	缺点：
	运行时性能略差，因为需要在运行时加载代码和数据。
	可执行文件依赖于动态库文件，如果动态库文件不可用或损坏，程序将无法运行。

problem: 为什么有些链接错误直到运行时才会出现？
answer:
	动态链接： C 程序通常使用动态链接，其中代码和库在运行时链接到可执行文件。如果在运行时找不到必需的库或代码，则会出现链接错误。


处理器的指令集架构描述： 每条机器代码指令的效果

微体系结构描述的处理器实际上是如何实现的。
利用直接存储器存取（DMA)技术， 数据可以不通过处理器直接从磁盘到达主存


L1和L2高速缓存通过静态随机访问存储器（SRAM）实现。

存储器层次结构的主要思想是上一层的存储器作为低一层存储器的高速缓存。



            应用程序



			操作系统


处理器           主存      I/O设备

计算机系统的分层视图



进程             进程      进程
        
              虚拟内存    虚拟内存

                          文件

处理器           主存      I/O设备
操作系统抽象表示


操作系统两个基本功能：
	1. 防止硬件被失控的应用程序滥用
	2. 向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备

操作系统会提供一种假象， 好像系统上只有这个程序在运行， 程序看上去是独占地使用处理器， 主存和IO处理器。 处理器看上去就像在不间断地一条接着一条执行程序的指令。该程序的代码和数据是系统内存中唯一的对象。
进程是操作系统对一个正在运行的程序的一种抽象。在一个系统上可以同时运行多个
进程，而每个进程都好像在独占地使用硬件。而并发运行，则是说一个进程的指令和另一
个进程的指令是交错执行的。


操作系统保持跟踪进程运行所需的所有状态信息。这种状态， 也就是上下文。

从一个进程到另一个进程的转换是由操作系统内核管理的。

一个进程实际上
可以由多个称为线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的
代码和全局数据。


虚拟内存是一个抽象概念， 它为每一个进程提供了一个假象， 即每个进程都在独占地使用主存。 每个进程看到的内存都是一致的， 称为虚拟地址空间。

虚拟地址空间：
      程序代码和数据
      堆
      共享库
      栈
      内核虚拟内存
----------------------------------------------------------------------------练习：
---1.9----------------------
并发： 一个同时具有多个活动的系统。
并行： 用并发来使一个系统运行的更快。



1. 线程级并发 ：
			构建在进程这个抽象上， 使用线程， 我们能在一个进程中执行多个控制流
2. 指令级并行
	     同时执行多条指令的属性称为指令级并行。
3. 单指令、多数据并行