使服务器同时向所有发起请求的客户端提供服务。
向多个客户端提供服务是一种有效利用CPU的方式。
多进程服务器： 通过创建多个进程提供服务。
多路复用服务器： 通过捆绑并统一管理I/O对象提供服务。
多线程服务器： 通过生成与客户端等量的线程提供服务。

进程：
	占用内存空间的正在运行的程序。
	
	游戏未进行运行状态， 是程序。
	开始运行游戏， 游戏被加载到主内存中并进入运行状态， 这时
	才称为进程。
	
	
无论进程是如何创建的， 所有进程都会从操作习题分配ID.
此时ID称为进程ID, 其值为大于2的整数。
用于创建多进程服务器端的fork函数
#include <unistd.h> 
pid_t fork(void);
	成功时返回进程ID, 失败时返回-1 
fork函数将创建调用进程副本。 
并非根据完全不同的程序创建进程， 而是复制
正在运行的， 调用fork函数的进程。
因为通过同一个进程， 复制相同的内存空间， 之后的、
程序流要根据fork函数的返回值加以区分。

	父进程： fork函数返回子进程ID
	子进程： fork函数返回0
 
 
父进程指 原进程， 即调用fork函数的主体， 
子进程是通过父进程调用fork函数复制出的进程
int gval = 10;
int main(void)  { //父进程 
	int lval = 20;
	lval += 5;
	gval++;
	pid_t pid = fork(); //pid为子进程ID
	if(pid == 0) {
		gval++;
	} else {
		lval++;
	}
}

//gval复制为11 
int main(void) {
	//lval复制为25
	pid_t pid = fork() ; // pid为0 
	if (pid == 0)  {
		gval++;
 	} else {
 		lval++;
	 }
}


调用fork函数后，父子进程拥有完全独立的内存结构

进程完成工作后（执行完main函数中的程序后）应被销毁， 但有时
这些进程将变成僵尸进程， 占用系统中的重要资源。

下面两种fork函数产生子进程的终止方式：“
	传递参数并调用exit函数
	main函数中执行return语句并返回值

向exit函数传递的参数值和main函数的return语句返回值都会传递给操作系统。
操作系统不会销毁子进程， 直到把这些值传递给产生孩子进程的父进程。

应该向创建子进程的父进程传递子进程的exit参数值或return语句的返回值

操作系统不会主动把这些值传递给父进程。 只有父进程主动发起请求时， 操作系统才会
传递该值。 如果父进程未主动要求获得子进程的结束状态值， 操作系统将一直保存， 并让子进程一直处于僵尸进程状态。

销毁僵尸进程1： 利用wait函数
#include <sys/wait.h> 
pid_t wait(int * statloc);
	成功返回终止的子进程ID, 失败时返回-1
调用此函数时如果已有子进程终止， 那么子进程终止时传递的返回值
（exit函数的参数值， main函数的return返回值 将保存到该函数的参数所
指空间。
但函数参数指向的单元中还包含其他信息： 所以需要下面宏进行分离
WIFEXITED子进程正常终止时返回 true
WEXITSTATUS返回子进程的返回值 

if (WIFEXISTED(status)) {   //是正常终止吗 
	puts("Normal termination");
	printf("Child pass num: %d", WEXITSTATUS(status)); //那么返回值是多少 
}
销毁僵尸进程2： 使用waitpid函数
wait函数会引起程序阻塞


#include <sys/wait.h>
pid_t waitpid(pid_t pid, int * statloc, int options);
	成功返回终止的子进程ID, 失败时返回-1 