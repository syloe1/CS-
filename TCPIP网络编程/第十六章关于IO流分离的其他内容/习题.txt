文件描述符：文件描述符（File Descriptor, FD）是一个整数，用于标识已打开的文件或套接字。在 Unix/Linux 系统中，文件描述符并不区分输入描述符和输出描述符。每个文件描述符都可以用来进行读写操作，只要其打开模式允许（如 O_RDONLY、O_WRONLY、O_RDWR 等）。

FILE 结构体指针：FILE 结构体指针是 C 标准库中的一种抽象，用于处理文件流（file stream）。通过 stdio.h 提供的函数（如 fopen、fread、fwrite 等）进行文件操作。FILE 结构体封装了文件描述符，并提供了缓冲机制和其他高级功能。
b.复制文件描述符时将生成相同值的描述符，可以通过这2个描述符进行I/O。
c.可以利用创建套接字时返回的文件描述符进行I/O，也可以不通过文件描述符，直接通过FILE结构体指针完成。
d.可以从文件描述符生成FILE结构体指针，而且可以利用这种FILE结构体指针进行套接字I/O。
e.若文件描述符为读模式，则基于该描述符生成的FILE结构体指针同样是读模式；若文件描述符为写模式，则基于该描述符生成的FILE结构体指针同样是写模式。
(2)EOF的发送相关描述中
a.终止文件描述符时发送EOF。
在实际使用中，关闭输出流并不直接发送 EOF。在网络编程中，关闭文件描述符或者套接字才会导致 EOF 的发送。如果仅仅是关闭 FILE 结构体的输出流（使用 fclose），并不会立刻在底层发送 EOF，除非它也关闭了底层文件描述符。
c.如果复制文件描述符，则包括复制的文件描述符在内，所有描述符都终止时才会发送EOF。
d.即使复制文件描述符，也可以通过调用shutdown函数进入半关闭状态并发送EOF。