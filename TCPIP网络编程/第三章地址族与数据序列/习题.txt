problem ;
	IP地址族IPv4和IPv6有何区别 ? 在何种背景下诞生了IPv6？
answer:
	地址长度： 32位的地址长度 ipv4
	           128位的地址长度 ipv6
	地址空间：
	
	地址表示方式：
	头部复杂度
	内置功能
	安全性


诞生背景是为了应对ipv4地址耗尽的问题

problem:
	通过ipv4网络iD、主机id、及路由器的关系说明公司局域网中的计算机传输数据的过程
answer:
	
	|---[计算机A: 192.168.1.10]---|     |---[交换机]---|     |---[计算机B: 192.168.1.20]---|
                 |                      |                        |
            (局域网)               (局域网)               (局域网)

|---[计算机A: 192.168.1.10]---|     |---[交换机]---|     |---[路由器: 192.168.1.1]---|
                 |                      |                        |
            (局域网)               (局域网)               (互联网)

    计算机A发送数据到不同子网或互联网中的计算机C（例如`172.16.0.5`）


problem：
	套接字地址分为IP地址和端口号。 为什么需要IP地址和端口号？
		IP地址用于在网络层标识设备（主机或路由器），确定数据包的发送和接收位置
		
		端口号用于在传输层标识应用程序或服务，区分同一设备上不同的应用进程
		
problem:
	1-1023是知名端口
	HTTP端口80 HTTPS端口443
	FTP端口20  数据传输
	   端口21  控制（命令）
	 
problem:
 bind函数原型：
	int bind (int sockfd, struct sockaddr* myaddr, socklen_t addrlen);
 而调用时
	bind(serv_sock, (struct sockaddr*)& serv_addr, sizeof(serv_addr));
	此处serv_addr位sockaddr_in结构体变量。 与函数原型不同， 传入的是sockaddr_in结构体变量，请说明原因。
answer:
	在网络编程中，虽然bind函数的原型要求一个struct sockaddr*类型的参数，但实际上传递的是一个struct sockaddr_in（或其他具体地址类型），并通过类型强制转换将其转化为struct sockaddr*。这是因为struct sockaddr是一个通用的地址结构，可以适用于多种协议族，而struct sockaddr_in是特定于IPv4的地址结构。通过这种设计，网络编程接口能够保持通用性和灵活性，适应多种网络协议的需求。
	
problem:
	解释大端序 小端序 网络字节序 ， 并说明为何需要网络字节序。
	大端序： 高位字节存放到低位地址
	小端序： 高位字节存放到高位地址
	大端序先保存最高位字节
	
	网络字节序是一种规定好的字节序，它是大端序（Big Endian）。网络协议中要求数据在网络上传输时使用网络字节序，以保证不同类型的计算机在通信时能够正确解析数据
	
	网络字节序是一种规定好的字节序，即大端序（Big Endian），用于在网络中传输数据。它提供了一个统一的标准，确保不同类型的计算机在网络通信时能够正确解析数据，保证了网络通信的可靠性和互操作性。
		
	
problem:
	怎么表示回送地址 ? 其含义是什么 ? 如果向回送地址传输数据将会发生什么呢？
	
		IPv4回送地址：127.0.0.1
		含义： 回送地址的主要含义是指向本地主机，即发送数据到回送地址时，数据不会离开主机，而是在主机内部进行传输。回送地址通常用于测试和调试本地网络堆栈，以及本地应用程序之间的通信。
		
	当向回送地址传输数据时，数据包在本地系统内进行处理，而不会通过任何物理网络接口进行传输。具体来说：

数据包发送：

应用程序将数据发送到回送地址（如127.0.0.1）。
数据包被网络堆栈接收，但不会通过网卡（网络接口卡）发送到外部网络。
数据包接收：

网络堆栈会将数据包直接传递给本地主机上的相应端口上的监听服务。
接收的应用程序从回送地址读取数据，仿佛它来自网络，但实际上数据并没有离开主机。


problem:
   大端序计算机希望把4字节整数型数据12传递到小端序计算机。 请说出
   数据传输过程中发生的字节序变换过程。
   
   
   原始数据：在大端序计算机上，整数 12 的存储方式为00 00 00 0C，其中高位字节（Most Significant Byte，MSB）在低地址处，低位字节（Least Significant Byte，LSB）在高地址处。

传输过程：大端序计算机将数据以网络字节序（即大端序）发送到网络上。

接收端：小端序计算机接收数据，此时需要将接收到的数据从网络字节序（大端序）转换为小端序。

字节序转换：小端序计算机在接收到数据后，将数据的字节序进行转换。转换后的结果为0C 00 00 00，即高位字节在高地址处，低位字节在低地址处。

最终数据：在小端序计算机上，整数 12 的存储方式为0C 00 00 00。

通过这个过程，数据在从大端序计算机传输到小端序计算机的过程中，字节序发生了变换，以确保数据在不同字节序的计算机之间正确解释和处理。