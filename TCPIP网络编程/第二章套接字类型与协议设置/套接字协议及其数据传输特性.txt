协议族： 
  PF_INET      ipv4互联网协议族
  PF_INET6     ipv6互联网协议族
  PF_LOCAL     本地通信的unix协议栈
  PF_PACKET    底层套接字的协议族
  PF_IPX       IPX Novell协议族

套接字类型1： 面向连接的套接字SOCK_STREAM
	传输过程中数据不会消失
	按序传输数据
	传输的数据不存在数据边界

收发数据的套接字内部都有缓冲区， 简而言之就是字节数组。
通过套接字传输的数据将保存到该数组 

problem: 
	如果这个缓冲被接收的数据填满会发生什么事情？
之后传递的数据是否会丢失？
	
answer: 
	首先调用read函数从缓冲读取部分数据。 因此， 缓冲并不总是满的。
	但如果read函数读取速度比接收数据的速度慢， 则缓冲有可能被填满。
	此时套接字无法再接收数据， 但即使这样也不会发生数据丢失， 因为传输端套接字将停止传输。
	面向连接的套接字会根据接收端的状态传输数据， 如果传输出错还会提供重传服务。
	因此， 面向连接的套接字除特殊情况外不会发生数据丢失。
	
套接字连接必须一一对应。

可靠的、按序传递的、基于字节的面向连接的数据传输方式的套接字。

套接字类型2： 面向消息的套接字SOCK_DGRAM
	  强调快速传输而非传输顺序
	  传输的数据可能丢失也可能损毁
	  传输的数据又数据边界
	  限制每次传输的数据大小
	
不可靠的、 不按序传递的、以数据的高速传输为目的的套接字

int socket(int domain, int type, int protocol);
通过前两个参数传递了协议族信息和套接字数据传输方式即可创建所需套接字。

同一协议族中存在多个数据传输方式相同的协议。
此时需要第三个参数具体 指定协议信息。

PF_INET表示IPV4网络协议族， SOCK_STREAM是面向连接的数据传输。
满足这2个条件的协议只有IPPROTO_TCP， 下面这种套接字称为TCP套接字

	int tcp_socket=socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

SOCK_DGRAM表示面向消息的数据传输方式，满足上述条件的协议只有IPPROTO_UDP.
下面这种套接字称为 UDP套接字。
	
	int udp_socket=socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);


