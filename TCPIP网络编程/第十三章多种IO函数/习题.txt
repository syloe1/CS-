（1）下列关于MSG_OOB可选项的说法？
a. MSG_OOB指传输Out-of-band数据，是通过其他路径高速传输数据。
b. MSG_OOB并不是通过其他路径高速传输数据的，而是通过TCP连接的同一路径传输。这个选项用于标记发送的数据为带外数据（Out-of-band data），并不会影响数据传输的速度或顺序。
c. 设置MSG_OOB使数据先到达对方主机后，以普通数据的形式和顺序读取。也就是说，只是提高了传输速度，接收方无法识别这一点。
d. MSG_OOB无法脱离TCP的默认数据传输方式。即使设置了MSG_OOB，也会保持原有传输顺序。该选项只用于要求接收方紧急处理。

(2) 利用readv&writev函数收发数据有何优点？分别从函数调用次数和I/O缓冲的角度给出说明。
	利用 readv 和 writev 函数收发数据的主要优点在于减少系统调用的次数和减少数据复制的次数，从而提高效率。

函数调用次数：
使用 readv 和 writev 函数可以将多个缓冲区的数据一次性地读取或写入。相比于使用多次 read 和 write 函数，这样可以减少系统调用的次数，从而提高了系统的性能和效率。
I/O缓冲：
当使用 readv 和 writev 函数时，操作系统可以在内核中直接操作数据，而无需将数据从用户空间复制到内核空间，再从内核空间复制到其他地方。这样可以减少数据在内存中的复制次数，减少了对I/O缓冲的访问次数，提高了数据传输的效率和性能。
综上所述，利用 readv 和 writev 函数可以减少系统调用次数和数据复制次数，从而提高数据传输的效率和性能。
(3) 通过recv函数验证输入缓冲是否存在数据时（确认后立即返回时），如何设置recv函数最后一个参数中的可选项？分别说明各可选项的含义。
		
在 recv 函数中，可以通过设置最后一个参数中的可选项来控制函数的行为。以下是常用的可选项及其含义：

MSG_PEEK：

这个可选项使 recv 函数从输入缓冲区中读取数据，但不会将数据从缓冲区移除。这样，即使读取了数据，下一次调用 recv 函数时仍然可以再次读取同样的数据。这个选项常用于检查输入缓冲区中是否存在数据，但又不想实际地读取数据。
MSG_WAITALL：

如果设置了这个选项， recv 函数将一直等待，直到指定长度的数据全部到达或者连接关闭。如果没有设置这个选项， recv 函数可能会在没有接收到指定长度的数据时立即返回，只返回已经到达的数据。这个选项通常用于确保一次接收到全部需要的数据。
MSG_OOB：

这个选项用于接收带外数据（Out-of-Band data）。带外数据是TCP连接中的一种特殊数据，它可以在普通数据之外被发送和接收，通常用于紧急情况下的数据传输。使用这个选项时， recv 函数将接收到带外数据，而不是普通数据。
MSG_DONTWAIT：

如果设置了这个选项， recv 函数将以非阻塞模式运行，即使没有数据到达，它也会立即返回。如果没有设置这个选项， recv 函数将会阻塞直到有数据到达为止。这个选项通常用于非阻塞式的套接字操作。
根据你的需求，可以选择适合的可选项来设置 recv 函数的行为。
(4) 可在Linux平台通过注册事件处理函数接收MSG_OOB数据。那Windows中如何接收？请说明接收方法。

在Windows平台，可以使用ioctlsocket函数和SIOCATMARK命令来判断套接字上是否存在带外数据（Out-of-Band data）。带外数据在Windows中通常与紧急数据（urgent data）一起处理。

下面是接收带外数据的基本方法：

使用ioctlsocket函数检查套接字是否有带外数据到达。

如果ioctlsocket返回0，则表示套接字上有带外数据。你可以调用recv函数来接收带外数据。