网络编程就是编写程序使两台连网的计算机相互交换数据。

创建套接字：
#include <sys/socket.h>
int socket(int domain, int type, int protocol);
	成功返回文件描述符， 失败返回-1 
 原来是由socket函数生成套接字的

给创建好的套接字分配IP地址和端口号
#include <sys/socket.h>
int bind(int sockfd, struct sockaddr* myaddr, socklen_t addrlen) ;
	成功时返回0， 失败时返回-1 

把套接字转换为可连接状态
#include <sys/socket.h>
int listen(int sockfd, int backlog);
	成功时返回0， 失败时返回-1 

接受套接字连接
#include <sys/socket.h>
int accept(int sockfd, struct sockaddr* addr, socklen_t *addrlen);
	成功返回文件描述符， 失败返回-1 

网络编程中接受连接请求的套接字创建过程如下：
	1. 调用socket函数创建套接字
	2. 调用bind函数分配ip地址和端口号
	3. 调用listen函数转为可接受请求的状态
	4. 调用accept函数受理连接请求


客户端只有两个操作：
		调用socket函数创建套接字
		调用connect函数向服务器发送请求连接请求
		
#include <sys/socket.h>
int connect(int sockfd, struct sockaddr* serv_addr, socklen_t addrlen);
	成功时返回0，失败时返回-1 

在linux运行两个程序
开两个终端： 一个终端输入
	gcc hello_server.c -o hserver
	./hserver 9190
另一个输入：
	gcc hello_client.c -o hclient
	./hclient 1227.0.0.1 9190


在linux下， socket也被认为是文件的一种。因此在网络中数据传输过程中自然可以使用文件
I/O的相关函数。

文件描述符 0 标准输入
		   1 标准输出
		   2 标准错误

文件描述符有时也称为句柄。 句柄是window中的术语。 
window中叫 术语
linux中叫 描述符

打开文件：
	第一个参数是打开的目标文件名及路径信息
	第二个参数是文件打开模式（文件特性信息）

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int open(const char* path, int flag);
	成功时返回文件描述符， 失败时返回-1 

打开模式：
	O_CREAT         必要时创建文件 
	O_TRUNC         删除全部现有数据 
	O_APPEND        维持现有数据， 保存到其后面 
	O_RDONLY     	只读打开 
	O_WRONLY       只写打开 
	O_RDWR          读写打开 

关闭文件：
#include <unistd.h> 
int close(int fd);
 成功时返回0， 失败时返回-1 
 fd是需要关闭的文件或者套接字的文件描述符
可以关闭文件和套接字

写入文件：
#include <unistd.h> 
ssize_t write(int fd, const void* buf, size_t nbytes);
	成功时返回写入的字节数， 失败时返回-1
	buf是保存要传输数据的缓冲地址值
	nbytes要传输数据的字节数 
size_t是使用typedef声明的unsigned int类型
ssize_t是使用typedef声明的signed int类型

读取文件中的数据
#include <unistd.h> 
ssize_t read(int fd, void* buf, size_t nbytes);
	成功返回接受的字节数（但遇到文件结尾则返回0）, 失败时返回-1
	
	