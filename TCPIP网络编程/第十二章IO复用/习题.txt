(1)请解释复用技术的通用含义，并说明何为I/O复用。
	复用技术的通用含义
	复用技术是指在系统设计中，通过共享资源来提高系统的效率和性能的一种技术手段。复用技术可以应用于各种领域，包括硬件、软件、通信和计算等。其核心思想是通过允许多个用户或进程同时使用同一资源，从而最大化资源的利用率，减少资源的浪费。

	I/O复用
	I/O复用（I/O Multiplexing）是一种允许一个进程在等待多个文件描述符（如网络连接、管道、终端等）上的事件时，不必为每个文件描述符创建单独的进程或线程的方法。通过I/O复用技术，一个进程可以同时监控多个I/O操作，从而提高系统的并发处理能力和资源利用率。

	I/O复用的机制
	在Unix和Linux系统中，I/O复用主要通过以下几种系统调用实现：

	select():

	select() 允许一个进程同时监视多个文件描述符的读、写和异常事件。
	进程可以指定一个时间限制，如果在指定时间内没有事件发生，select() 会返回超时。
	优点：简单易用，广泛支持。
	缺点：在监视大量文件描述符时效率较低，因为需要遍历所有文件描述符。
	poll():

	poll() 与 select() 类似，但提供了更灵活的接口，允许监视更多类型的事件。
	poll() 使用一个结构体数组来表示文件描述符及其事件。
	优点：灵活性更高，支持更多事件类型。
	缺点：在监视大量文件描述符时效率也较低。
	epoll()（仅适用于Linux）:

	epoll 是Linux内核提供的一种高效的I/O复用机制。
	epoll 由三个系统调用组成：epoll_create()、epoll_ctl() 和 epoll_wait()。
	epoll 使用事件通知的方式，只有当文件描述符上有事件发生时，才会通知进程，从而避免了遍历所有文件描述符。
	优点：高效，适用于大规模并发连接。
	缺点：仅支持Linux，代码复杂度较高。
	I/O复用的应用场景
	I/O复用技术主要应用于需要处理大量并发I/O操作的场景，例如：

	网络服务器: 高并发的网络服务器，如Web服务器、邮件服务器等，需要同时处理大量客户端连接。
	实时系统: 需要同时监控多个数据源或设备的系统，如实时数据采集系统、监控系统等。
	多路复用设备: 需要同时管理多个终端、传感器或其他I/O设备的系统。

(2)多进程并发服务器的缺点有哪些？如何在I/O复用服务器端中弥补？

	多进程并发服务器的缺点
	资源消耗大：每个进程都有自己的地址空间和资源，当连接数目增多时，创建大量进程会占用大量的系统资源，如内存和CPU。

	上下文切换开销高：在多进程模型中，操作系统需要频繁地在进程之间进行上下文切换，上下文切换开销较大，会影响系统性能。

	进程间通信复杂：由于每个进程有独立的地址空间，进程间通信（IPC）变得复杂，需要借助管道、消息队列、共享内存等IPC机制，增加了编程复杂性。

	进程管理复杂：管理大量子进程（如创建、销毁、回收僵尸进程等）会增加编程难度和系统开销。

	在I/O复用服务器中弥补
	使用I/O复用技术（如 select()、poll() 或 epoll()）可以有效弥补多进程并发服务器的缺点。以下是I/O复用技术如何弥补这些缺点的详细说明：

	减少资源消耗：

	I/O复用技术允许一个进程同时监控多个文件描述符，从而减少了创建大量进程的需求。这样，可以节省系统资源（如内存和CPU），提高资源利用率。
	降低上下文切换开销：

	通过使用I/O复用，一个进程可以管理多个客户端连接，避免了频繁的进程上下文切换。这样可以显著降低上下文切换的开销，提高系统性能。
	简化进程间通信：

	在I/O复用模型中，所有通信都在一个进程内完成，不需要复杂的进程间通信机制。数据的读写可以通过普通的文件描述符完成，简化了编程模型。
	简化进程管理：

	I/O复用模型中，只需要管理一个进程，而不是多个进程。这样可以减少进程的创建、销毁和回收的开销，简化了进程管理。
(3)复用服务器端需要select函数。下列关于select函数使用方法的描述错误的是？
a.调用select函数前需要集中I/O监视对象的文件描述符。
b.select 函数在每次调用后会重置 fd_set 集合中的文件描述符。因此，每次调用 select 之前都需要重新设置要监视的文件描述符。如果不重新设置，这些文件描述符将不会被 select 监视。
c. 使用 select 函数的复用服务器可以同时监视多个客户端连接，并在任何一个连接有数据可读时进行处理。因此，复用服务器端可以同时服务多个客户端，而不是同一时间只能服务于一个客户端。
d.与多进程服务器端不同，基于select的复用服务器端只需要1个进程。因此，可以减少因创建进程产生的服务器端的负担。

(4)select函数的观察对象中应包含服务器端套接字（监听套接字），那么应将其包含到哪一类别监听对象集合？请说明原因。
	在使用 select 函数时，服务器端套接字（监听套接字）应包含在读监听对象集合（readfds）中。原因如下：

原因说明
监听套接字的功能：

监听套接字的主要功能是接受新的客户端连接。当有新的客户端尝试连接到服务器时，监听套接字会变得可读。这意味着可以调用 accept 函数来接受新的连接。
读事件的监视：

select 函数用于监视一组文件描述符的多个事件，其中包括读事件、写事件和异常事件。对于监听套接字，我们关注的是它何时有新的连接可接受，这就是读事件。因此，需要将监听套接字添加到读监听对象集合（readfds）中。
