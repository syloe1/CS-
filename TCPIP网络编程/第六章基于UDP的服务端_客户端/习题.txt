1）UDP为什么TCP速度快？为什么TCP数据传输可靠而UDP数据传输不可靠？
	连接建立和维护： TCP是一个面向连接的协议，在传输数据之前需要建立一个连接（通过三次握手）。这个连接保证了数据的有序传输和双方的同步。

确认机制： 每个TCP数据包在传输之后，接收方必须发送确认信息（ACK）给发送方，确认数据包已经成功接收。如果发送方没有收到确认，它会重传数据包，直到收到确认为止。

序列号和重排序： TCP使用序列号来标识每个字节的数据位置。接收方可以根据序列号将收到的数据包按正确的顺序重新组装，即使数据包到达的顺序错乱，也能正确恢复原始数据。

流量控制： TCP使用流量控制机制（如滑动窗口）来确保发送方不会淹没接收方，即发送速度不会超过接收方的处理能力。这保证了数据传输的稳定性和可靠性。

拥塞控制： TCP具有拥塞控制机制，能够检测网络拥塞并动态调整发送速度，以避免进一步的拥塞，从而提高传输的可靠性
	无连接： UDP不建立连接，数据包独立发送，无法保证数据包到达目的地。

没有确认机制： UDP没有确认机制，发送方不会知道数据包是否成功到达接收方，也不会重传丢失的数据包。

没有序列号和重排序： UDP数据包独立处理，接收方不会对其进行重排序，数据包到达的顺序可能与发送顺序不一致。

没有流量控制和拥塞控制： UDP没有流量控制和拥塞控制机制，无法避免网络拥塞或接收方被淹没的情况。
（UDP特点的是
a.UDP不同于TCP，不存在连接的概念，所以不像TCP那样只能进行一对一的数据传输

d. UDP套接字和TCP套接字可以共存。若需要，可以在同一主机进行TCP和UDP数据传输。
(3）UDP数据报向对方主机的UDP套接字传递过程中，IP和UDP分别负责哪些部分？

	IP协议的职责
IP（Internet Protocol）是负责在网络中传输数据包的协议，主要职责包括：

路由选择：IP协议负责将数据报从源主机传输到目标主机。在此过程中，数据报可能需要经过多个路由器和网络，IP协议选择最佳路径将数据报送达目的地。

数据封装：在传输过程中，IP协议将上层协议（如UDP）的数据封装成IP数据报，添加IP头部信息。IP头部信息包括源IP地址、目标IP地址、总长度、标识、片偏移、生存时间（TTL）、协议类型等。

分片和重组：如果数据报过大而无法直接通过某个网络的最大传输单元（MTU），IP协议会将数据报分片（fragmentation），以确保每个片段能够通过网络。目标主机会将这些片段重新组装成完整的数据报。

差错检测：IP头部包含校验和字段，用于检测传输过程中头部是否发生错误。如果检测到错误，数据报将被丢弃。

UDP协议的职责
UDP（User Datagram Protocol）是无连接的传输层协议，主要职责包括：

数据封装：UDP协议将应用层的数据封装成UDP数据报，添加UDP头部信息。UDP头部包括源端口号、目标端口号、数据报长度和校验和。

端口管理：UDP协议使用端口号来区分不同的应用程序或服务。源端口号和目标端口号分别标识数据报的发送者和接收者的应用程序。

数据传递：当IP层将数据报送达到目标主机后，UDP层负责将数据报传递到对应的应用程序。具体来说，UDP通过目标端口号将数据报交给相应的套接字（socket）。

差错检测：虽然UDP是无连接的、不保证可靠性的协议，但它仍然提供了一个简单的差错检测机制。UDP头部包含一个校验和字段，用于检测数据报在传输过程中是否发生错误。如果启用了校验和，接收方会计算并验证校验和，确保数据报未被破坏。

传输过程概述
发送端：

应用层生成数据，并通过UDP协议将其封装成UDP数据报。
UDP数据报添加头部信息（源端口号、目标端口号等），然后传递给IP层。
IP层将UDP数据报封装成IP数据报，添加IP头部信息（源IP地址、目标IP地址等）。
IP层将IP数据报发送到网络，通过路由器传输到目标主机。
接收端：

IP层接收到数据报，检查IP头部信息和校验和，确认数据报正确无误后，剥去IP头部，将UDP数据报传递给UDP层。
UDP层检查UDP头部信息和校验和，确认数据报正确无误后，根据目标端口号将数据报传递给对应的应用程序。
(4） UDP一般比TCP快，但根据交换数据的特点，其差异可大可小。请说明何种情况下UDP
的性能优于TCP?
	UDP一般比TCP快的原因在于其无连接、无确认、无重传等机制使得它在某些情况下能够显著降低通信延迟和开销。
（5)客户端TCP套接字调用connect南数时自动分配IP和端口号。UDP中不调用bind函数，那合
适分配IP和端口号?
	在UDP中，如果不显式调用 bind 函数分配 IP 和端口号，操作系统会在发送 UDP 数据包时自动分配一个临时的 IP 地址和端口号。这种自动分配的 IP 和端口号通常称为临时地址或匿名地址。具体来说：

IP 地址的分配：操作系统会选择一个合适的本地 IP 地址，通常是主机上的某个网络接口的 IP 地址。这个 IP 地址可以是主机的默认 IP 地址或者是多个网络接口中的一个。

端口号的分配：操作系统会从可用的端口号范围中选择一个空闲的端口号作为临时端口号。这个端口号通常是在 1024 到 65535 的范围内选择的，避免了已知的系统端口和保留端口。

自动分配的 IP 和端口号使得应用程序可以不必关心细节而直接发送数据，这在某些场景下是非常方便的，特别是对于一些临时的或者简单的通信任务。但是需要注意的是，在某些情况下，应用程序可能需要知道自己的 IP 地址和端口号，以便其他设备或程序可以正确地发送数据到它。这时就需要显式调用 bind 函数，指定所需的 IP 和端口号。

(6）TCP客户端必需调用conncct函数，而UDP中可以选择性调用。请问，在UDP中调月conncet
函数有哪此好处？
	指定默认目标地址和端口号：

调用 connect 函数后，UDP套接字会被绑定到指定的目标地址和端口号上。
这样发送数据时就不需要每次都指定目标地址和端口号，可以简化发送数据的过程。
简化数据发送：

在调用 connect 函数后，可以直接使用 send 函数发送数据，而不需要每次都指定目标地址和端口号。
这样可以简化代码，提高可读性，并且减少了发送数据时的参数传递。
过滤非法数据：

调用 connect 函数后，UDP套接字会过滤掉来自非连接对象的数据包，只接收来自指定目标地址和端口号的数据包。
这样可以提高数据的安全性和稳定性，避免接收到不期望的数据包。
错误检测：

调用 connect 函数后，如果发送数据到未连接的目标地址和端口号，可能会收到 ECONNREFUSED 错误。
这样可以帮助及早发现和处理通信错误，提高程序的健壮性。