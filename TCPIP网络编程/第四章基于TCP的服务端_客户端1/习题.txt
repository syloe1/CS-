（1)请说明TCPAP的4层协议栈，并说明TCP和UDP套接字经过的层级结构差异。

		TCP 套接字是一个面向连接的套接字，它在传输层的 TCP 协议上工作。
		在应用层和传输层之间，TCP 套接字提供了可靠的、基于流的数据传输服务。
		TCP 套接字会建立连接，进行数据传输，并在传输过程中处理流量控制、拥塞控制和数据重传等问题，以确保数据的可靠性和顺序性。
		UDP 套接字：

		UDP 套接字是一个无连接的套接字，它在传输层的 UDP 协议上工作。
		在应用层和传输层之间，UDP 套接字提供了简单的、不可靠的数据传输服务。
		UDP 套接字不会建立连接，直接将数据报发送到目标地址，不对数据进行确认、重传或者顺序控制等操作。因此，UDP 套接字具有低延迟和更快的速度，但不保证数据的可靠性。
（2）请说出TCPAP协议栈中链路层和IP层的作用，并给出二者关系。
		
		链路层（Link Layer）的作用：
		物理传输：负责将数据帧在物理网络上传输，包括将数据转换成电信号发送到网络中，并在接收端将接收到的电信号转换成数据。

		数据帧封装：将网络层的数据包封装成数据帧，添加帧头和帧尾等信息，用于标识数据的起始和结束，并提供地址等必要信息。

		MAC（Media Access Control）地址：每个网络接口都有唯一的 MAC 地址，链路层使用 MAC 地址来确定数据帧的发送和接收目标。

		错误检测和纠正：负责在数据传输过程中进行错误检测和纠正，以确保数据的可靠传输。

		IP 层的作用：
		数据包封装：将传输层的数据段封装成 IP 数据包（Packet），添加 IP 头部信息，包括源地址和目标地址等。

		数据路由：根据目标 IP 地址确定数据包的传输路径，包括选择合适的路由器进行转发，并通过路由表决定数据包的下一跳。

		数据分片和重组：在需要时对数据包进行分片，以适应不同的网络传输需求，并在接收端将分片的数据包进行重组，恢复原始的数据。

		错误报告和处理：负责检测并处理数据包传输过程中的错误，包括丢包、超时等问题，通过 ICMP（Internet Control Message Protocol）向源主机发送错误报告。

		二者关系：
		相互衔接：链路层和 IP 层相互衔接，链路层将 IP 层的数据包封装成数据帧进行传输，而 IP 层根据链路层提供的数据帧进行数据路由和转发。

		数据封装：链路层封装 IP 层的数据包成数据帧，并在帧头中添加 MAC 地址等信息，而 IP 层封装传输层的数据段成 IP 数据包，并在包头中添加源地址和目标地址等信息。

		层次分明：链路层负责物理传输和数据帧的处理，而 IP 层负责数据路由和数据包的传输控制，二者各司其职，相互配合完成数据的传输和路由。
(3）为何需要把TCP/IP协议栈分成4层（或7层）？结合开放式系统回答。
	
		将 TCP/IP 协议栈分成四层（或七层）的主要目的是为了实现模块化设计和分层抽象，以便于协议的设计、实现和维护，并且能够促进网络设备和应用的互操作性。这种分层结构是开放式系统的核心概念之一。

开放式系统的特点：
模块化设计：开放式系统采用了模块化设计的原则，将系统划分为若干独立的模块，每个模块负责不同的功能，模块之间通过定义清晰的接口进行通信和交互。

标准化协议：开放式系统通过采用标准化的协议来实现不同设备和软件之间的互操作性，这些协议通常由国际标准化组织（ISO）或其他标准组织制定和管理。

分层抽象：开放式系统通常采用分层抽象的方式来组织协议栈，将整个通信过程划分为若干层次，每一层负责不同的功能，层与层之间通过定义好的接口进行交互。

分成四层（或七层）的原因：
模块化设计：将协议栈分成多层可以实现模块化设计，每一层负责不同的功能，便于实现、测试和维护。

分层抽象：通过分层抽象可以将复杂的网络通信过程分解为若干简单的层次，每一层只需要关注特定的功能，提高了系统的可扩展性和可维护性。

标准化协议：每一层都可以采用标准化的协议，这些协议定义了每一层的功能和接口规范，从而确保不同厂商的设备和软件能够互相通信和协作。

互操作性：分层结构可以促进不同厂商的设备和软件之间的互操作性，因为它们都遵循相同的协议和接口规范，能够进行有效的通信和交互。

灵活性和可扩展性：通过分层结构，可以灵活地替换或添加新的协议，以满足不同网络环境和需求的变化，提高了系统的灵活性和可扩展性。

综上所述，将 TCP/IP 协议栈分成四层（或七层）能够更好地实现开放式系统的设计原则，提高系统的可靠性、可维护性和互操作性。
(4）客户端调用connect函数向服务器端发送连接请求。服务器端调用哪个函数后，客户端可
以调用conncct函数？

	在服务器端，调用 listen() 函数后，客户端可以调用 connect() 函数建立连接。

listen() 函数用于将套接字标记为被动套接字，开始监听传入的连接请求。一旦服务器端调用了 listen() 函数，
表示服务器端已经准备好接受客户端的连接请求。客户端在服务器端调用 listen() 函数之后，可以调用 connect() 
函数向服务器端发送连接请求，建立连接。
(5)什么时候创建连接请求等待队列？它有何作用？与accept有什么关系？
	`连接请求等待队列在服务器调用 listen() 函数后被创建。它的作用是存储已经到达但尚未被 accept() 函数处理的连接请求。连接请求等待队列的大小通常由操作系统或者应用程序通过参数来指定。

当客户端向服务器端发起连接请求时，如果服务器端正在处理连接请求等待队列中的其他连接请求，那么新的连接请求将被放入连接请求等待队列中等待处理。只有当服务器调用 accept() 函数时，才会从连接请求等待队列中取出一个连接请求进行处理。

accept() 函数用于从连接请求等待队列中取出一个连接请求进行处理，建立与客户端的连接。如果连接请求等待队列中没有连接请求，accept() 函数将阻塞直到有新的连接请求到达。因此，连接请求等待队列和 accept() 函数密切相关，它们共同实现了服务器端对客户端连接请求的处理。

(6）客户端中为何不需要调用bind函数分配地址？如果不调用bind函数，那何时、如何向套
接字分配IP地址和端口号？


	相反，客户端套接字会由操作系统自动分配本地地址和端口号。

客户端套接字在创建时会被操作系统分配一个临时的本地 IP 地址和端口号。这个过程通常发生在调用 connect() 函数时，因为 connect() 函数需要指定目标服务器的 IP 地址和端口号，而客户端的本地地址和端口号是由操作系统自动分配的。

具体流程如下：

当客户端调用 socket() 函数创建套接字时，操作系统会为套接字分配一个临时的本地端口号，并分配一个可用的本地 IP 地址（通常是本地主机的 IP 地址）。

当客户端调用 connect() 函数连接到目标服务器时，操作系统会在内核中记录目标服务器的 IP 地址和端口号，并将客户端套接字与目标服务器的 IP 地址和端口号关联起来。

客户端套接字会发送连接请求到目标服务器的 IP 地址和端口号。如果连接成功建立，操作系统会将客户端套接字与目标服务器的连接关联起来，并更新套接字的状态。

因此，客户端不需要显式调用 bind() 函数来分配地址，而是由操作系统在需要时自动分配。这样的设计简化了客户端程序的编写，并且不会造成地址冲突或者端口占用的问题。
