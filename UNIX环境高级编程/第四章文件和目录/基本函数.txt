#include <sys/stat.h>
int stat(const char * restrict pathname, struct stat * restrict buf)

int fstat(int fd, struct stat * buf)

int lstat(const char * restrict pathname, struct * restrict buf)

int fstatat(int fd, const * restrict pathname , struct stat * restrict buf, int flag)

文件类型：
	基本文件
	目录文件
	块特殊文件
	字符串特殊文件
	FIFO 命名管道
	套接字
	符号链接
	
#include <unistd.h>
int access(const char * pathname, int mode)
int faccessat(int fd, const char *pathname, int mode, int flag) //flag参数会用于改变faccessat的行为


函数umask为进程设置文件模式创建屏蔽字，并返回之前的值
#include <sys/stat.h>
mode_t umask(mode_t cmask);

更改现有文件的访问权限。
#include <sys/stat.h>
int chmod(const char * pathname, mode_t mode);
int fchmod(int fd, mode_t mode);
int fchmodat(int fd, const char * pathname, mode_t mode, int flag);

chmod函数在指定的文件上进行操作，而
fchmod函数则对已打开的文件进行操作。fchmodat函数与chmod函数在下面两种情况下是相同的，一种是pathname参数为绝对路径。
另一种是 fd参数取值AT_FDCWD而pathname参数为相对路径。 否则fchmodat计算相对于打开目录，的pathname, flag参数可以用于改变fchmodat的行为。

chown fchown  更改文件的用户ID和组ID
fchownat lchown函数更改符号链接本身的所有者。

#include <unistd.h>
int chown(const char * pathname, uid_t owner, gid_t group)
int fchown(int fd, uid_t owner, gid_t group);
int fchownat(int fd, const char * pathname, uid_t owner, git_t group, int flag);
int lchown(const char * pathname , uid_t owner, gid_t group);
 
文件截断：
	#include <unistd.h>
	int truncate(const char * pathname, off_t length);
	int ftruncate(int fd, off_t length);
这两个函数将一个现有文件长度截断为length. 如果该文件以前的长度大于length,则超过length以外的数据就不能访问。

符号链接文件的实际内容包含了该符号链接所指向的文件的名字。


创建一个指向现有文件的链接
#include <unistd.h>
int link(const char * existingraph, const char * newpath);
int linkat(int efd, const char * existinggraph, int nfd, const char * newpath, int flag);
这两个函数创建一个新目录项， 它引用现有文件existinggraph. 如果newpath已经存在， 则返回出错。 只创建newpath中的最后一个分量， 路径中其他部分应当已经存在。

删除现有目录项。
#include <unistd.h>
int unlink(const char * pathname);
int unlinkat(int fd, const cahr * pathname, int flag);


remove功能和rmdir相同
#include <stdio.h>
int remove(const char * pathname);



重命名函数
#include <stdio.h>

int rename(const char * oldname, const char * newname);

int renameat(int oldfd, const char * oldname, int newfd, const char *newname);

符号链接是对一个文件的间接指针。

使用symlink或symlinkat创建符号链接。
#include <unistd.h>
int symlink(const char * actualpath, const char * sympath);
int symlinkat(const char * actualpath, int fd, const char * sympath);

打开链接：
#include <unistd.h>
ssize_t readlink(const char * restrict pathname, char * restrict buf, size_t bufsize);
ssize_t readlinkat(int fd, const char * restrict pathname, char * restrict buf, size_t bufsize);


文件的访问和修改时间：
#include <sys/stat.h>
int funtimes(int fd, const struct timespec time[2]);
int utimensat(int fd, const char * path, const struct timespec timer[2], int flag);


utimes对路径名进行操作
#include <sys/time.h>
int utimes(const char * pathname, const struct timeval times[2]);
struct timeval {
	time_t tv_sec;
	long tv_usec;
};

使用mkdir mkdirat创建目录
rmdir删除目录

#include <sys/stat.h>
int mkdir(const char * pathname, mode_t mode);
int mkdirat(int fd, const char* pathname, mode_t mode);

#include <unistd.h>
int rmdir(const char * pathname);

读目录
#include <dirent.h>
DIR* opendir(const char * pathname);
DIR* fdopendir(int fd);
	成功返回指针
struct dirent* readdir(DIR* dp);

void rawinddir(DIR* dp);
int closedir(DIR* dp)
long telldir(DIR* dp)
void seekdir(DIR* dp, long loc)


改变当前工作目录：
#include <unistd.h>
int chdir(const char * pathname);
int fchdir(int fd);

getcwd从当前工作目录开始， 用..寻找其上一级目录
#include <unistd.h>
char * getcwd(char * buf, size_t size);