比较两个线程
#include <pthread.h>
int pthread_equal(pthread_t tid1, pthread_t tid2);
获得自身ID
#include <pthread.h>
pthread_t pthread_self(void)

线程创建
#include <pthread.h>
int pthread_create(pthread_t* restrict tidp,
	const pthread_attr_t *restrict attr,
	void* (*start_rtn)(void*), void* restrict arg);


线程退出
#include <pthread.h>
void pthread_exit(void *val_ptr);
#include<pthread.h>
int pthread_join(pthread_t thread, void** rval_ptr)

调用pthread_cancel请求取消同一进程中的其他线程
int pthread_cancel(pthread_t tid);

线程清理程序：
#include <pthread.h>
void pthread_cleanup_push(void (*rtn)(void *) , void *arg);
void pthread_cleanup_pop(int execute);

使用pthread_detach分离线程。
#include <pthread.h>
int pthread_detach(pthread_t tid);



使用pthread的互斥接口来保护数据， 确保同一时间只有一个

访问共享资源前对互斥量加锁， 访问后解锁

互斥变量用pthread_mutex_t数据类型表示的。

#include <pthread.h>
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const 
		pthread_mutexattr_t* restrict attr); //初始化内存 
int pthread_mutex_destroy(pthread_mutex_t * mutex); //释放内存
 
#include <pthread.h>
int pthread_mutex_lock(pthread_mutex_t* mutex); //加锁
int pthread_mutex_trylock(pthread_mutex_t * mutex) ;
int pthread_mutex_unlock(pthread_mutex_t * mutex);

如果线程试图对同一个互斥量加锁两次， 那么它自身就会陷入死锁状态。

一个线程一直占有第一个互斥量， 并且试图锁住第二个互质量时处于阻塞状态， 但是第二个互质量的线程也试图锁住第一个互斥量。 因为两个线程都在试图相互请求另一个线程拥有的资源， 所以这两个线程都无法向前运行， 就产生死锁。


pthread_mutex_timedlock与pthread_mutex_lock基本等价， 但是到达时间pthread_mutex_timedlock不会对互斥量进行加锁。
#include <pthread.h>
#include <time.h>
int pthread_mutex_timedlock(pthread_mutex_t* restrict mutex, 
	const struct timespec * restrict tsptr);


读写锁： 
	读模式加锁
	写模式加锁
	不加锁
一次只有一个线程可以占用写模式的读写锁， 但是多个线程可以同时占有读模式的读写锁
 
读写锁使用之前必须初始化， 在释放它们底层的内存之前必须销毁
#include <pthread.h>
int pthread_rwlock_init(pthread_rwlock_t* restrict rwlock,
	const pthread_rwlockattr_t* restrict attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);

加锁
#include <pthread.h>
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);


带有超时的读写锁
#include <pthread.h>
#include <time.h>
int pthread_rwlock_timedrdlock(pthread_rwlock_t * restrict rwlock,
	const struct timespec* restrict tsptr);
int pthread_rwlock_timewrlock(pthread_rwlock_t* restrict rwlock,
	const struct timespec* restrict tsptr);


条件变量与互斥量一起使用时， 允许线程以无竞争的方式等待特定条件发生。






#include <pthread.h>
int pthread_cond_init(pthrad_cond_t * restrict cond,	
	const pthread_condattr_t* restrict attr);
int pthread_cond_destroy(pthread_cond_t* cond);
#include <pthread.h>
int pthread_cond_wait(pthread_cond_t* restrict cond, 
	pthread_mutex_t * restrict mutex);
int pthread_cond_timedwait(pthread_cond_t * restrict mutex, 
	const struct timespec * restrict tsptr);


#include <pthread.h>
int pthread_cond_signal(pthread_cond_t * cond);
int pthread_cond_broadcast(pthread_cond_t *cond);



自旋锁： 在获取锁之前一直处于忙等阻塞的状态。
适用情况：
	锁被持有的时间短， 而且线程并不希望在重新调度上花费太多的成本。

#include <pthread.h>
int pthread_spin_init(pthread_spinlock_t * lock, int pshared);
int pthread_spin_destroy(pthread_spinlock* lock);

#include <pthread.h>
int pthread_spin_lock(pthread_spinlock_t* lock);
int pthread_spin_trylock(pthread_spinlock_t* lock);
int pthread_spin_unlock(pthread_spinlock_t* lock);

