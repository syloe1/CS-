本章描述的函数经常被称为不带缓冲的IO.

不带缓冲意思是每个read和write都调用内核中
的一个系统调用。

对于内核而言， 所有打开的文件都通过文件描述符引用。当打开一个
现有文件或创建一个新文件时， 内核向进程返回一个文件描述符。

unix系统shell把文件描述符与进程的标准输入关联， 文件描述符1与标准输出关联。
文件描述符2与标准错误关联。
将0 1 2替换成STDIN_FILENO STDOUT_FILENO STRERR_FILENO以提高可读性。
这些常量在头文件<unistd.h>

调用open或者openat函数可以打开或创建一个文件。
#include <fcntl.h>
int open(const char * path, int oflag, ..//mode_t mode);
int openat(int fd, const char *path, int oflag, ...//mode_t mode);
	成功返回文件描述符， 出错返回-1
	oflag参数
		O_RDONLY 只读打开
		O_WRONLY 只写打开
		O_RDWR   读写打开
		O_EXEC 只执行打开
		O_SEARCH 只搜索打开
     		O_CREAT 不存在就创建它
		O_TRUNC 如果文件存在，而且为只写或读写打开， 则将其长度截断为0
调用creat函数创建一个新文件。
#include <fcntl.h>
int create(const char *path, mode_t mode);

fd参数把open和openat函数区分开。
	1. path参数指定的是绝对路径名， 在这种情况下， fd参数被忽略， openat函数相当于open函数
	2. path参数指定的是相对路径名， fd参数指出了相对路径名在文件系统中的开始地址。fd参数是通过
		打开相对路径名所在的目录来获取。
	3. path参数执行了相对路径名， fd参数具有特殊指AF_FDCWD。 这种情况下， 路径名在当前工作目录获取，
	openat函数在操作上与open函数类似。

利用close函数关闭一个打开文件
#include <unistd.h>
int close(int fd);	
	若成功， 返回0. 若出错， 返回-1
每个打开文件都有一个与其相关联的“当前文件偏移量。 通常是一个非负整数。
当打开一个文件时， 除非指定O_APPEND选项， 否则该偏移量被设置为0.
#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
	whence是seek_set， 则将该文件的偏移量设置为距文件开始处offset个字节
	whence是seek_cur,  则将该文件的偏移量设置为其当前在加offset, offset可为正或负
	whence是seek_end,  则将该文件的偏移量设置为文件长度加offset, offset可为正或负
	
调用read函数从打开文件中读数据
#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);	
	出错返回-1
	read成功返回读到的字节数， 如已到达文件尾端， 返回0
调用write函数向打开文件写数据
#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);	
	成功返回已写字节数， 出错返回-1

原子操作
#include <unistd.h>
ssize_t pread(int fd, void *buf, size_t  nbytes, off_t offset);
	
ssize_t pwrite(int fd, const void * buf, size_t nbytes, off_t offset);
调用pread函数相当于调用lseek后调用read.
调用pread时， 无法中断其定位和读操作。
不更新当前文件偏移量

原子操作指的是 由多步组成的一个操作。 如果该操作原子地执行， 则要么执行完所有步骤。
要么一步也不执行， 不可能只执行所有步骤的一个子集。

复制一个现有的文件描述符。
#include <unistd.h>
int dup(int fd);
int dup2(int fd, int fd2)
	若成功返回文件描述符， 出错 返回-1
由dup返回的新文件描述符一定是当前可用文件描述符中的最小数值。 对于dup2, 可以用fd2参数指定
新描述符的值。 
如果fd2已经打开，先将其关闭。如果fd等于fd2,则dup2返回fd2, 而不关闭它。 

dup(fd) 等价于 fcntl(fd, F_DUPFD, 0)

dup2(fd, fd2) close(fd2) fcntl(fd, F_DUPFD, fd2);
	1. dup2是一个原子操作， 而close和fctl包括两个函数调用， 有可能在close和fcntl之间
调用了信号捕捉函数， 它可能修改文件描述符。 如果不同线程改变了文件描述符的话， 也会出现相同的问题。

	2. dup2和fcntl有一些不同的error.



向文件写入数据时， 内核通常先将数据复制到缓冲区， 然后排入队列 ， 晚些时候在写入磁盘====》延迟写

#include<unistd.h>

int fsync(int fd)
int fdatasync(int fd)
void sync(void)

sync函数只是将所有修改过的块缓冲区排入写队列， 然后就返回。 它并不等待实际写磁盘操作结束。
fsync函数只对由文件描述符fd指定的一个文件起作用， 并且等待写磁盘操作结束才返回。

函数fcntl可以改变已经打开文件的属性
#include <fcntl.h>
int fcntl(int fd, int cmd, ...//int arg)
	1.  复制一个已有的描述符(cmd=F_DUPFD 或 F_SETFD)
	2.  获取/设置文件描述符标志(cmd=F_GETFD 或 F_SETFD)
	3.  获取/设置文件状态标志 (cmd=F_GETFL 或 F_SETFL)
	4.  获取/设置异步IO所有权 (cmd=F_GETOWN 或 F_SETOWN)
	5.  获取/设置记录锁(cmd=F_GETLK、 F_SETLK、 F_SETLKN) 	

函数ioctl是IO操作的杂物箱


#include <unistd.h>
#include <sys/ioctl.h>
int ioctl(int fd, int request, ...)








