#include <unistd.h>
pid_t getpid(void); //调用进程的进程ID
pid_t getppid(void); //调用进程的父进程ID

uid_t getuid(void)；//调用进程的实际用户ID

uid_t geteuid(void) //调用进程的有效用户ID

gid_t getgid(void) //调用进程的实际组ID

gid_t getegid(void); //调用进程的有效组ID

一个现有进程可以调用fork函数创建一个新进程。
pid_t fork(void);

fork函数被调用一次， 返回两次。 两次返回的区别是子进程的返回值是0，
父进程的返回值是新建子进程的进程ID

子进程获得父进程数据空间， 堆和栈的副本。 这是子进程所拥有的副本。 父进程和子进程不共享这些存储空间， 父进程和子进程共享正文段。

#include <sys/wait.h>
pid_t wait(int *statloc);
pid_t waitpid(pid_t pld, int *statloc, int options);


fork两次可以避免僵尸进程
#include <sys/wait.h>
int waitid(idtype_t idypt, id_t id, siginfo_t *info, int options);


当多个进程都企图对共享数据进行某种处理， 而最后的结果又取决于进程运行的顺序时， 我们认为发生了竞争条件。

如果一个进程要等待其父进程终止， 使用下面循环：
	while (getppid() != 1)
		sleep(1);
这种形式的循环称为轮询， 问题是调用了CPU时间。

为了避免竞争条件和轮询， 使用
信号机制， 各种形式的进程间通信(IPC)也可以使用。

#include <stdlib.h>
int system(const char* cmdstring);


获取登录名：
#include <unistd.h>
char * getlogin(void);


进程调度
#include <unistd.h>
int nice(int incr);

#include <sys/resource.h>
int getpriority(int which,id_t who);



进程时间：
	墙上时钟时间
	用户CPU时间
	系统CPU时间
#include <sys/times.h>
clock_t times(struct tms* buf);
	成功返回已经流逝的墙上时钟时间
struct tms {
	clock_t tms_utime;
	clock_t tms_stime;
	clock_t tms_cutime;
	clock_t tms_cstime;
};

