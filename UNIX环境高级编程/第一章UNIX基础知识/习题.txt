1 在系统上验证，除根目录外，目录.和，.是不同的。
	使用 ls 命令显示当前目录的内容，包括隐藏文件和隐藏目录：
	ls -a
	检查是否存在 . 和 .. 目录项，以及它们的内容是否不同。

	在大多数情况下，. 表示当前目录，.. 表示父目录。
1.3 在1.7节中，perror的参数是用ISO C的属性const定义的，而strerror的整型参数没有用此属性定义，为什么？
	在C语言中，使用 const 关键字可以定义常量，以防止程序意外修改参数的值。在 perror 函数中，参数 msg 是一个字符串指针，用于描述正在进行的操作或相关的上下文信息。由于 msg 是一个指向字符串的指针，它不会在函数内部被修改，因此使用 const 属性可以增加代码的可读性和安全性。

而在 strerror 函数中，参数 errnum 是一个整型参数，代表错误码。错误码是一个传递给函数的值，函数内部根据这个值返回相应的错误消息字符串。由于 errnum 是一个传递给函数的值，而不是一个指向可变数据的指针，因此它并不需要使用 const 属性来防止被修改。

总的来说，const 属性主要用于指示编译器和其他开发人员，函数的参数是一个常量，不应该被修改。在 perror 函数中，参数 msg 是一个常量字符串，而在 strerror 函数中，参数 errnum 只是一个传递给函数的值，并不需要被声明为常量。
1.4 若日历时间存放在带符号的32位整型数中，那么到哪一年它将溢出？可以用什么方法扩展溢出浮点数？采用的策略是否与现有的应用相兼容？
	为了解决这个问题，可以采用以下几种方法之一：

使用更大的数据类型： 一种解决方案是使用更大的数据类型来存储日历时间，例如 64 位整数（int64）。这样可以将时间范围扩展到更远的未来，远远超过人类文明的预期寿命。

使用无符号整数： 另一种方法是使用无符号整数来表示时间戳。无符号整数在溢出时不会变为负数，而是继续增加到最大值，然后从最小值开始计数。这样可以将时间范围扩展到更长的时间，但会导致时间戳的回滚问题。

使用其他表示方法： 可以考虑使用其他表示方法来表示时间，例如使用浮点数来表示秒数，或者使用自定义的数据结构来表示时间。这样可以更灵活地处理时间范围的扩展和溢出问题。

选择哪种方法取决于具体的应用场景和需求。在选择方法时，需要考虑与现有应用的兼容性以及对时间精度和范围的要求。
1.5 若进程时间存放在带符号的32位整型数中，而且每秒为100时钟滴答，那么经过多少天后该时间值将会溢出？

	假设进程时间以带符号的32位整型数表示，每秒钟有100个时钟滴答，则每秒增加的时间单位为100。即每秒的进程时间增量为100。

一个带符号的32位整数的最大值为 
2
31
−
1
2 
31
 −1，即 2147483647。如果每秒增加100个时钟滴答，那么整数的溢出时间是 
2147483647
/
100
2147483647/100 秒。

将秒数转换为天数，需要将秒数除以每天的秒数。一天有 24 小时，每小时有 60 分钟，每分钟有 60 秒。因此，一天有 
24
×
60
×
60
=
86400
24×60×60=86400 秒。

因此，进程时间值将会在约 
2147483647
/
100
/
86400
2147483647/100/86400 天后溢出。

计算结果为：约 24855.5575 天。

所以，大约在 24856 天后，进程时间值将会溢出。