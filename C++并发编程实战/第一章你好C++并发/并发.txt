做这个任务一点在做另一个任务一点， 看起来是任务在并行发生， 这是任务切换。 称为并发。

系统每次从一个任务切换到另一个时都得执行一次上下文切换。

多进程并发， 将应用程序分为多个、独立的、单线程的进程

在单个进程中允许多个线程。进程中的所有线程都共享相同的地址空间

使用并发的原因：
	关注点分离和性能。

一个任务分为几部分且各自并行运行， 从而降低总运行时间， 这就是任务并行。

每个线程在不同的数据部分上执行相同的操作， 称为数据并行

带锁的资源获得即初始化 RAII, 确保当退出相关作用域的时候互斥元被解锁。


C++对原子操作的直接支持， 不需要写相关的汇编语言。

使用高级工具所带来的实现成本--抽象惩罚。

每个线程都必须有一个初始函数。
