C++是一门系统编程语言。
原子类型和操作提供了可通常减至一或两个CPU指令的低阶同步操作的功能。
内存模型：
	基本结构
	并发方面

C++程序中的所有数据均是由对象组成的。
无论什么类型， 对象均被存储于一个或多个内存位置中。
相同的位域是相同内存位置的一部分。

C++程序中每个对象， 都具有一个确定的修改顺序，由来自程序中的所有线程的对该对象的所有写入组成的， 由对象的初始化开始。

标准原子类型可以在<atomic>头文件中找到。
利用互斥量看起来像原子的。

atomic_flag f = ATOMT_FLAG_INIT;


所有的自由函数接受一个指向原子对象的指针作为对象。
可用的原子操作有：
	load store exchange compare

explicit变量被提供并允许你指定所需的内存顺序


与之同步关系只出自原子类型上的操作。

六种内存顺序：
	memory_order_relaxed
	memory_order_consume
	memory_order_acquire
	memory_order_release
	memory_order_acq_rel
	memory_order_seq_cst
三种模型：
	顺序一致
	获得-释放
	松散

从同步的观点来看， 顺序一致的存储与读取该存储值得同一个变量得顺序一致载入是同步的。

线程不必和事件的顺序一致。

在没有其他的顺序约束时， 唯一的要求是所有的线程对每个独立变量的修改顺序达成一致。


原子载入是获取操作， 原子存储是释放操作。