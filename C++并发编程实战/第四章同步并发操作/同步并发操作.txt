等待事件或其他条件

让等待的线程在检查之间休眠一会儿
this_thread:sleep_for函数
bool flag;
mutex m;
void wait_for_flag() {
	unique_lock<mutex> lk(m) ;
	while (!flag) {
		lk.unlock();
		this_thread::sleep_for(chrono::milliseconds(100));
		lk.lock();
	}
}


条件变量等待条件， 需要和互斥元一起工作

当等待线程重新获取互斥元并检查条件时， 如果它并非直接响应另一个线程的通知， 这就是所谓的伪唤醒。

由于锁定互斥元是一种可变的操作， 故互斥元对象必须标记为mutable， 以便可以被锁定在empty()和拷贝构造函数中。




C++使用future为这类一次性事件建模， 如果一个线程需要等待特定的一次性事件， 那么它就会获取一个future来表示这一事件。

一旦事件已经发生（即future变为就绪）， future就无法复位。
两类future：
	唯一future std::future<>
	共享future std::shared_future<>
唯一future的实例是仅有一个指向其关联事件的实例，
共享future的实例可以指向同一个事件

如果多个线程需要访问同一个future对象， 它们必须通过互斥元或其他同步机制来保护访问。

从后台任务中返回值
假如你有一个长期运行的计算， 预期最终得到一个有用的结果， 但是现在， 你还不需要这个值。
std::async函数模板


在不需要立即得到结果的时候， 你可以通过std::async来启动一个异步任务。 std::async返回一个std::future对象， 而不是给你一个thread对象让你在上面进行等待， std::future对象最终将持有函数的返回值。当你需要这个值时， 只要在future上调用get()， 线程就会阻塞直到future就绪。

std::packaged_task<>将一个future绑定到一个函数或可调用对象上。  当packaged_task<>被调用时， 它就调用相关联函数或可调用对象， 并且让future就绪， 将返回值作为关联数据存储。

std::promist<T>提供了一中设置值方式。 它可以在这之后通过相关联的future<T>对象进行读取。 一对promise为这一设施提供了一个可能的机制， 等待中的线程可以阻塞future, 同时提供数据的线程可以使用配对中的promise项， 来设置相关的值并使future就绪。

shared_future实例是可复制的。

std::chrono::system_clock::now()返回系统时钟的当前时间
时间段是由std::chrono::duration<>类模板进行处理的